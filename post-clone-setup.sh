#!/bin/bash
# Post-Clone Setup Script
# Run this after cloning the repository to set up the environment

set -e

echo "============================================"
echo "RAG Platform - Post-Clone Setup"
echo "============================================"
echo ""

# Get the directory where the script is located
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
cd "$SCRIPT_DIR"

# Check if we're in the right directory
if [ ! -f "run.sh" ]; then
    echo "❌ Error: run.sh not found"
    echo "Please run this script from the repository root"
    exit 1
fi

echo "✓ Repository structure verified"
echo "✓ Project directory: $SCRIPT_DIR"
echo ""

# Step 1: Create environment files with auto-detection
echo "Step 1: Setting up environment files..."

# Detect project directory
PROJECT_DIR="$SCRIPT_DIR"

# Create backend .env with project-relative paths
if [ ! -f "backend/.env" ]; then
    echo "  Creating backend/.env with auto-detected paths..."
    cat > "backend/.env" << EOF
# RAG Platform Backend Environment
# Auto-generated by post-clone-setup.sh

# MongoDB Configuration
MONGO_URL="mongodb://localhost:27017"
DB_NAME="rag_platform"

# CORS Configuration
CORS_ORIGINS="*"

# Cache directories - Auto-configured to project directory
HF_HOME="$PROJECT_DIR/.cache/huggingface"
TRANSFORMERS_CACHE="$PROJECT_DIR/.cache/huggingface"
SENTENCE_TRANSFORMERS_HOME="$PROJECT_DIR/.cache/sentence_transformers"

# Optional: Gemini API Key (can also be set via Settings page)
# GEMINI_API_KEY="your-api-key-here"
EOF
    echo "  ✓ Created backend/.env with project path: $PROJECT_DIR"
else
    echo "  ✓ backend/.env already exists (will be updated by run.sh)"
fi

# Create frontend .env
if [ ! -f "frontend/.env" ]; then
    echo "  Creating frontend/.env..."
    cat > "frontend/.env" << EOF
# RAG Platform Frontend Environment
# Auto-generated by post-clone-setup.sh

# Backend API URL
REACT_APP_BACKEND_URL=http://localhost:8001

# WebSocket configuration for development server
WDS_SOCKET_PORT=443
EOF
    echo "  ✓ Created frontend/.env"
else
    echo "  ✓ frontend/.env already exists (will be updated by run.sh)"
fi

# Create necessary directories
echo "  Creating cache directories..."
mkdir -p "$PROJECT_DIR/.cache/huggingface"
mkdir -p "$PROJECT_DIR/.cache/sentence_transformers"
mkdir -p "$PROJECT_DIR/files"
mkdir -p "$PROJECT_DIR/backend/chroma_db"
echo "  ✓ Cache directories created"

echo ""

# Step 2: Make scripts executable
echo "Step 2: Making scripts executable..."
chmod +x run.sh 2>/dev/null || true
chmod +x verify-configuration.sh 2>/dev/null || true
chmod +x test-permanent-config.sh 2>/dev/null || true
chmod +x verify-setup.sh 2>/dev/null || true
chmod +x diagnose.sh 2>/dev/null || true
echo "  ✓ All scripts are now executable"
echo ""

# Step 3: Display next steps
echo "============================================"
echo "✅ Post-Clone Setup Complete!"
echo "============================================"
echo ""
echo "Next steps:"
echo ""
echo "1. Run the universal setup script:"
echo "   ./run.sh"
echo ""
echo "2. This will:"
echo "   - Install all system dependencies"
echo "   - Create virtual environment at .venv/"
echo "   - Set up cache directories at .cache/"
echo "   - Install backend and frontend dependencies"
echo "   - Configure and start all services"
echo ""
echo "3. After setup completes, verify with:"
echo "   ./verify-configuration.sh"
echo ""
echo "4. Access the application:"
echo "   Frontend: http://localhost:3000"
echo "   Backend:  http://localhost:8001/api/"
echo ""
echo "5. Configure your API key:"
echo "   - Open http://localhost:3000"
echo "   - Go to Settings page"
echo "   - Add your Gemini API key"
echo "   - Get key from: https://aistudio.google.com/app/apikey"
echo ""
echo "For detailed instructions, see:"
echo "  - FIRST_TIME_SETUP.md"
echo "  - README.md"
echo ""
